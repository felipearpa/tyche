AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application
Resources:
  AuthGatewayHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          FirebaseAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: https://securetoken.google.com/tyche-588ce
              audience:
                - tyche-588ce
        DefaultAuthorizer: FirebaseAuthorizer

  GetPoolById:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::GetPoolByIdAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  GetGamblersByPoolId:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::GetGamblersByPoolIdAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool/index/GetPoolGamblerScoresByPool-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}/gamblers
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi

  GetPoolGamblerScoreById:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::GetPoolGamblerScoreByIdAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}/gamblers/{gamblerId}
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  GetPendingBets:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::GetPendingBetsAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool/index/GetPendingPoolGamblerBets-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}/gamblers/{gamblerId}/bets/pending
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  GetFinishedBets:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::GetFinishedBetsAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool/index/GetPendingPoolGamblerBets-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}/gamblers/{gamblerId}/bets/finished
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  GetPoolsByGamblerId:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.GamblerFunction::GetPoolsByGamblerIdAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool/index/GetPoolGamblerScoresByGambler-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /gamblers/{gamblerId}/pools
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  CreatePool:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::CreatePoolAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:TransactWriteItems
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Account
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools
            Method: POST
            ApiId: !Ref AuthGatewayHttpApi
  
  JoinPool:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolFunction::JoinPoolAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
                - arn:aws:dynamodb:us-east-2:567776770335:table/Account
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pools/{poolId}/gamblers
            Method: POST
            ApiId: !Ref AuthGatewayHttpApi
  
  Bet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.BetFunction::BetAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /bets
            Method: PATCH
            ApiId: !Ref AuthGatewayHttpApi
  
  GetOpenPoolLayouts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.PoolLayoutFunction::GetOpenPoolLayoutsAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/PoolLayout
                - arn:aws:dynamodb:us-east-2:567776770335:table/PoolLayout/index/GetOpenedPoolLayout-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /pool-layouts/open
            Method: GET
            ApiId: !Ref AuthGatewayHttpApi
  
  LinkAccount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Function.AccountFunction::LinkAccountAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:TransactWriteItems
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Account
                - arn:aws:dynamodb:us-east-2:567776770335:table/Account/index/GetByEmail-index
      Architectures: [ arm64 ]
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /accounts
            Method: POST
            ApiId: !Ref AuthGatewayHttpApi
  
  OnPoolChanged:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Felipearpa.Tyche.AmazonLambda::Felipearpa.Tyche.AmazonLambda.Event.PoolEvent::OnPoolChangedAsync
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 256
      Timeout: 60
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:ListStreams
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:Query
                - dynamodb:PutItem
              Resource:
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool/stream/2025-08-18T16:45:55.692
                - arn:aws:dynamodb:us-east-2:567776770335:table/PoolLayout
                - arn:aws:dynamodb:us-east-2:567776770335:table/Pool
      Architectures: [ arm64 ]
      Events:
        PoolStream:
          Type: DynamoDB
          Properties:
            Stream: arn:aws:dynamodb:us-east-2:567776770335:table/Pool/stream/2025-08-18T16:45:55.692
            StartingPosition: LATEST
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 1
            Enabled: true

Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${AuthGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
